//
// Purpur Tentakel
// 05.03.2024
// This is a generated file. Do not edit this file.
//

#include "G_Fight.hpp"
#include "G_Version.hpp"
#include "G_ConfigIO.hpp"
#include "HelperConfigIO.hpp"

namespace cst {
    void G_ConfigIO::LoadConfig() {
        loadEntryCount = 0;
        nlohmann::json load;
        auto& constants = app::AppContext::GetInstance().constants;
        if (not LoadAndValidateConfigJson(load)) {
            return;
        }

        if (nlohmann::json son; LoadSection(load, son, G_ConfigEnum::G_FIGHT, G_Fight::s_total_config_entry_count)) {
            if (float out; LoadFloat(son, out, G_ConfigEnum::G_FIGHT_HIT_CHANCE)) { constants.g_fight.m_hit_chance = out; }
            if (utl::usize out; LoadUSize(son, out, G_ConfigEnum::G_FIGHT_FLEET_FIGHT_RANGE)) { constants.g_fight.m_fleet_fight_range = out; }
            if (bool out; LoadBool(son, out, G_ConfigEnum::G_FIGHT_IS_FIGHT_PLANET_FLEET)) { constants.g_fight.m_is_fight_planet_fleet = out; }
            if (bool out; LoadBool(son, out, G_ConfigEnum::G_FIGHT_IS_FIGHT_TARGET_POINT_FLEET)) { constants.g_fight.m_is_fight_target_point_fleet = out; }
            if (bool out; LoadBool(son, out, G_ConfigEnum::G_FIGHT_IS_FIGHT_TARGET_POINT_TARGET_POINT)) { constants.g_fight.m_is_fight_target_point_target_point = out; }
            if (bool out; LoadBool(son, out, G_ConfigEnum::G_FIGHT_IS_FIGHT_PLANET_TARGET_POINT)) { constants.g_fight.m_is_fight_planet_target_point = out; }
        }

        if (nlohmann::json son; LoadSection(load, son, G_ConfigEnum::G_VERSION, G_Version::s_total_config_entry_count)) {
        }

        CheckLoadEntryCount();
        hlp::Print(hlp::PrintType::INFO, "config loaded");
    }

    void G_ConfigIO::SaveConfig() {
        auto const& constants = app::AppContext::GetInstance().constants;
        nlohmann::json save;

        save[CToS(G_ConfigEnum::G_FIGHT)] = {
            { CToS(G_ConfigEnum::G_FIGHT_TOTAL_CONFIG_ENTRY_COUNT), constants.g_fight.s_total_config_entry_count },
            { CToS(G_ConfigEnum::G_FIGHT_LOAD_CONFIG_ENTRY_COUNT), constants.g_fight.s_load_config_entry_count },
            { CToS(G_ConfigEnum::G_FIGHT_HIT_CHANCE), constants.g_fight.m_hit_chance },
            { CToS(G_ConfigEnum::G_FIGHT_FLEET_FIGHT_RANGE), constants.g_fight.m_fleet_fight_range },
            { CToS(G_ConfigEnum::G_FIGHT_IS_FIGHT_PLANET_FLEET), constants.g_fight.m_is_fight_planet_fleet },
            { CToS(G_ConfigEnum::G_FIGHT_IS_FIGHT_TARGET_POINT_FLEET), constants.g_fight.m_is_fight_target_point_fleet },
            { CToS(G_ConfigEnum::G_FIGHT_IS_FIGHT_TARGET_POINT_TARGET_POINT), constants.g_fight.m_is_fight_target_point_target_point },
            { CToS(G_ConfigEnum::G_FIGHT_IS_FIGHT_PLANET_TARGET_POINT), constants.g_fight.m_is_fight_planet_target_point },
        };

        save[CToS(G_ConfigEnum::G_VERSION)] = {
            { CToS(G_ConfigEnum::G_VERSION_TOTAL_CONFIG_ENTRY_COUNT), constants.g_version.s_total_config_entry_count },
            { CToS(G_ConfigEnum::G_VERSION_LOAD_CONFIG_ENTRY_COUNT), constants.g_version.s_load_config_entry_count },
            { CToS(G_ConfigEnum::G_VERSION_GAME_VERSION), constants.g_version.s_game_version },
            { CToS(G_ConfigEnum::G_VERSION_CONFIG_VERSION), constants.g_version.s_config_version },
            { CToS(G_ConfigEnum::G_VERSION_LANGUAGE_VERSION), constants.g_version.s_language_version },
        };

        hlp::SaveFile(Files::s_savesDir, Files::s_configFile, save.dump(4));
        hlp::Print(hlp::PrintType::INFO, "config saved");
    }

} // namespace cst
