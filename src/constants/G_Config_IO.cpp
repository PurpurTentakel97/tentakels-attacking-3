//
// Purpur Tentakel
// 06.03.2024
// This is a generated file. Do not edit this file.
//

#include "G_Fight.hpp"
#include "G_Version.hpp"
#include "G_Fleet.hpp"
#include "G_Game_Events.hpp"
#include "G_Global.hpp"
#include "G_Planet.hpp"
#include "G_Player.hpp"
#include "G_Config_IO.hpp"
#include "HelperConfigIO.hpp"


namespace cst {
    void G_Config_IO::LoadConfig() {
        loadEntryCount = 0;
        nlohmann::json load;
        auto& constants = app::AppContext::GetInstance().constants;
        if (not LoadAndValidateConfigJson(load)) {
            return;
        }

        if (nlohmann::json son; LoadSection(load, son, G_Config_Enum::G_FIGHT, G_Fight::s_total_config_entry_count)) {
            if (float out; LoadFloat(son, out, G_Config_Enum::G_FIGHT_HIT_CHANCE)) { constants.g_fight.m_hit_chance = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_FIGHT_FLEET_FIGHT_RANGE)) { constants.g_fight.m_fleet_fight_range = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_FIGHT_IS_FIGHT_PLANET_FLEET)) { constants.g_fight.m_is_fight_planet_fleet = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_FIGHT_IS_FIGHT_TARGET_POINT_FLEET)) { constants.g_fight.m_is_fight_target_point_fleet = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_FIGHT_IS_FIGHT_TARGET_POINT_TARGET_POINT)) { constants.g_fight.m_is_fight_target_point_target_point = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_FIGHT_IS_FIGHT_PLANET_TARGET_POINT)) { constants.g_fight.m_is_fight_planet_target_point = out; }
        }

        if (nlohmann::json son; LoadSection(load, son, G_Config_Enum::G_VERSION, G_Version::s_total_config_entry_count)) {
        }

        if (nlohmann::json son; LoadSection(load, son, G_Config_Enum::G_FLEET, G_Fleet::s_total_config_entry_count)) {
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_FLEET_MIN_FLEET_SPEED)) { constants.g_fleet.m_min_fleet_speed = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_FLEET_CURRENT_FLEET_SPEED)) { constants.g_fleet.m_current_fleet_speed = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_FLEET_MAX_FLEET_SPEED)) { constants.g_fleet.m_max_fleet_speed = out; }
        }

        if (nlohmann::json son; LoadSection(load, son, G_Config_Enum::G_GAME_EVENTS, G_Game_Events::s_total_config_entry_count)) {
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_MIN_EVENT_YEAR)) { constants.g_game_events.m_is_min_event_year = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_MIN_EVENT_YEAR)) { constants.g_game_events.m_min_event_year = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_EVENT_ON_HOME_WORLD)) { constants.g_game_events.m_is_event_on_home_world = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_GLOBAL_CHANCE)) { constants.g_game_events.m_global_chance = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_PIRATES)) { constants.g_game_events.m_is_pirates = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_PIRATE_CHANCE)) { constants.g_game_events.m_pirate_chance = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_MIN_PIRATE_SHIPS)) { constants.g_game_events.m_min_pirate_ships = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_MAX_PIRATE_SHIPS)) { constants.g_game_events.m_max_pirate_ships = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_REVOLTS)) { constants.g_game_events.m_is_revolts = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_REVOLTS_CHANCE)) { constants.g_game_events.m_revolts_chance = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_RENEGADE_SHIPS)) { constants.g_game_events.m_is_renegade_ships = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_RENEGADE_SHIPS_CHANCE)) { constants.g_game_events.m_renegade_ships_chance = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_SUPERNOVA)) { constants.g_game_events.m_is_supernova = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_SUPERNOVA_CHANCE)) { constants.g_game_events.m_supernova_chance = out; }
            if (float out; LoadFloat(son, out, G_Config_Enum::G_GAME_EVENTS_MIN_BLACK_HOLE_RANGE_FACTOR)) { constants.g_game_events.m_min_black_hole_range_factor = out; }
            if (float out; LoadFloat(son, out, G_Config_Enum::G_GAME_EVENTS_MAX_BLACK_HOLE_RANGE_FACTOR)) { constants.g_game_events.m_max_black_hole_range_factor = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_MAX_BLACK_HOLE_RANGE_FACTOR)) { constants.g_game_events.m_is_max_black_hole_range_factor = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_ENGINE_PROBLEM)) { constants.g_game_events.m_is_engine_problem = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_ENGINE_PROBLEM_CHANCE)) { constants.g_game_events.m_engine_problem_chance = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_MAX_ENGINE_PROBLEM_YEARS)) { constants.g_game_events.m_max_engine_problem_years = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_GAME_EVENTS_IS_PRODUCTION_PROBLEM)) { constants.g_game_events.m_is_production_problem = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_PRODUCTION_PROBLEM_CHANCE)) { constants.g_game_events.m_production_problem_chance = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GAME_EVENTS_MAX_PRODUCTION_PROBLEM_YEARS)) { constants.g_game_events.m_max_production_problem_years = out; }
        }

        if (nlohmann::json son; LoadSection(load, son, G_Config_Enum::G_GLOBAL, G_Global::s_total_config_entry_count)) {
            if (std::string out; LoadString(son, out, G_Config_Enum::G_GLOBAL_CURRENT_LANGUAGE_NAME)) { constants.g_global.m_current_language_name = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GLOBAL_MIN_ROUNDS)) { constants.g_global.m_min_rounds = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GLOBAL_MAX_ROUNDS)) { constants.g_global.m_max_rounds = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GLOBAL_CURRENT_TARGET_ROUND)) { constants.g_global.m_current_target_round = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_GLOBAL_CURRENT_ROUND)) { constants.g_global.m_current_round = out; }
        }

        if (nlohmann::json son; LoadSection(load, son, G_Config_Enum::G_PLANET, G_Planet::s_total_config_entry_count)) {
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLANET_MAX_SHIPS_FACTOR)) { constants.g_planet.m_max_ships_factor = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLANET_STARTING_HUMAN_SHIPS_MULTIPLIER)) { constants.g_planet.m_starting_human_ships_multiplier = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLANET_STARTING_GLOBAL_SHIPS_MULTIPLIER)) { constants.g_planet.m_starting_global_ships_multiplier = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLANET_HOME_WORLD_PRODUCTION)) { constants.g_planet.m_home_world_production = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLANET_MIN_PRODUCTION)) { constants.g_planet.m_min_production = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLANET_MAX_PRODUCTION)) { constants.g_planet.m_max_production = out; }
            if (float out; LoadFloat(son, out, G_Config_Enum::G_PLANET_HOME_WORLD_SPACING)) { constants.g_planet.m_home_world_spacing = out; }
            if (float out; LoadFloat(son, out, G_Config_Enum::G_PLANET_GLOBAL_SPACING)) { constants.g_planet.m_global_spacing = out; }
        }

        if (nlohmann::json son; LoadSection(load, son, G_Config_Enum::G_PLAYER, G_Player::s_total_config_entry_count)) {
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLAYER_MIN_COUNT)) { constants.g_player.m_min_count = out; }
            if (utl::usize out; LoadUSize(son, out, G_Config_Enum::G_PLAYER_MAX_COUNT)) { constants.g_player.m_max_count = out; }
            if (bool out; LoadBool(son, out, G_Config_Enum::G_PLAYER_IS_SHUFFLE)) { constants.g_player.m_is_shuffle = out; }
        }

        CheckLoadEntryCount();
        hlp::Print(hlp::PrintType::INFO, "config loaded");
    }

    void G_Config_IO::SaveConfig() {
        auto const& constants = app::AppContext::GetInstance().constants;
        nlohmann::json save;

        save[CToS(G_Config_Enum::G_FIGHT)] = {
            { CToS(G_Config_Enum::G_FIGHT_TOTAL_CONFIG_ENTRY_COUNT), constants.g_fight.s_total_config_entry_count },
            { CToS(G_Config_Enum::G_FIGHT_LOAD_CONFIG_ENTRY_COUNT), constants.g_fight.s_load_config_entry_count },
            { CToS(G_Config_Enum::G_FIGHT_HIT_CHANCE), constants.g_fight.m_hit_chance },
            { CToS(G_Config_Enum::G_FIGHT_FLEET_FIGHT_RANGE), constants.g_fight.m_fleet_fight_range },
            { CToS(G_Config_Enum::G_FIGHT_IS_FIGHT_PLANET_FLEET), constants.g_fight.m_is_fight_planet_fleet },
            { CToS(G_Config_Enum::G_FIGHT_IS_FIGHT_TARGET_POINT_FLEET), constants.g_fight.m_is_fight_target_point_fleet },
            { CToS(G_Config_Enum::G_FIGHT_IS_FIGHT_TARGET_POINT_TARGET_POINT), constants.g_fight.m_is_fight_target_point_target_point },
            { CToS(G_Config_Enum::G_FIGHT_IS_FIGHT_PLANET_TARGET_POINT), constants.g_fight.m_is_fight_planet_target_point },
        };

        save[CToS(G_Config_Enum::G_VERSION)] = {
            { CToS(G_Config_Enum::G_VERSION_TOTAL_CONFIG_ENTRY_COUNT), constants.g_version.s_total_config_entry_count },
            { CToS(G_Config_Enum::G_VERSION_LOAD_CONFIG_ENTRY_COUNT), constants.g_version.s_load_config_entry_count },
            { CToS(G_Config_Enum::G_VERSION_GAME_VERSION), constants.g_version.s_game_version },
            { CToS(G_Config_Enum::G_VERSION_CONFIG_VERSION), constants.g_version.s_config_version },
            { CToS(G_Config_Enum::G_VERSION_LANGUAGE_VERSION), constants.g_version.s_language_version },
        };

        save[CToS(G_Config_Enum::G_FLEET)] = {
            { CToS(G_Config_Enum::G_FLEET_TOTAL_CONFIG_ENTRY_COUNT), constants.g_fleet.s_total_config_entry_count },
            { CToS(G_Config_Enum::G_FLEET_LOAD_CONFIG_ENTRY_COUNT), constants.g_fleet.s_load_config_entry_count },
            { CToS(G_Config_Enum::G_FLEET_MIN_FLEET_SPEED), constants.g_fleet.m_min_fleet_speed },
            { CToS(G_Config_Enum::G_FLEET_CURRENT_FLEET_SPEED), constants.g_fleet.m_current_fleet_speed },
            { CToS(G_Config_Enum::G_FLEET_MAX_FLEET_SPEED), constants.g_fleet.m_max_fleet_speed },
        };

        save[CToS(G_Config_Enum::G_GAME_EVENTS)] = {
            { CToS(G_Config_Enum::G_GAME_EVENTS_TOTAL_CONFIG_ENTRY_COUNT), constants.g_game_events.s_total_config_entry_count },
            { CToS(G_Config_Enum::G_GAME_EVENTS_LOAD_CONFIG_ENTRY_COUNT), constants.g_game_events.s_load_config_entry_count },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_MIN_EVENT_YEAR), constants.g_game_events.m_is_min_event_year },
            { CToS(G_Config_Enum::G_GAME_EVENTS_MIN_EVENT_YEAR), constants.g_game_events.m_min_event_year },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_EVENT_ON_HOME_WORLD), constants.g_game_events.m_is_event_on_home_world },
            { CToS(G_Config_Enum::G_GAME_EVENTS_GLOBAL_CHANCE), constants.g_game_events.m_global_chance.value },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_PIRATES), constants.g_game_events.m_is_pirates },
            { CToS(G_Config_Enum::G_GAME_EVENTS_PIRATE_CHANCE), constants.g_game_events.m_pirate_chance.value },
            { CToS(G_Config_Enum::G_GAME_EVENTS_MIN_PIRATE_SHIPS), constants.g_game_events.m_min_pirate_ships },
            { CToS(G_Config_Enum::G_GAME_EVENTS_MAX_PIRATE_SHIPS), constants.g_game_events.m_max_pirate_ships },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_REVOLTS), constants.g_game_events.m_is_revolts },
            { CToS(G_Config_Enum::G_GAME_EVENTS_REVOLTS_CHANCE), constants.g_game_events.m_revolts_chance.value },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_RENEGADE_SHIPS), constants.g_game_events.m_is_renegade_ships },
            { CToS(G_Config_Enum::G_GAME_EVENTS_RENEGADE_SHIPS_CHANCE), constants.g_game_events.m_renegade_ships_chance.value },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_SUPERNOVA), constants.g_game_events.m_is_supernova },
            { CToS(G_Config_Enum::G_GAME_EVENTS_SUPERNOVA_CHANCE), constants.g_game_events.m_supernova_chance.value },
            { CToS(G_Config_Enum::G_GAME_EVENTS_MIN_BLACK_HOLE_RANGE_FACTOR), constants.g_game_events.m_min_black_hole_range_factor },
            { CToS(G_Config_Enum::G_GAME_EVENTS_MAX_BLACK_HOLE_RANGE_FACTOR), constants.g_game_events.m_max_black_hole_range_factor },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_MAX_BLACK_HOLE_RANGE_FACTOR), constants.g_game_events.m_is_max_black_hole_range_factor },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_ENGINE_PROBLEM), constants.g_game_events.m_is_engine_problem },
            { CToS(G_Config_Enum::G_GAME_EVENTS_ENGINE_PROBLEM_CHANCE), constants.g_game_events.m_engine_problem_chance.value },
            { CToS(G_Config_Enum::G_GAME_EVENTS_MAX_ENGINE_PROBLEM_YEARS), constants.g_game_events.m_max_engine_problem_years },
            { CToS(G_Config_Enum::G_GAME_EVENTS_IS_PRODUCTION_PROBLEM), constants.g_game_events.m_is_production_problem },
            { CToS(G_Config_Enum::G_GAME_EVENTS_PRODUCTION_PROBLEM_CHANCE), constants.g_game_events.m_production_problem_chance.value },
            { CToS(G_Config_Enum::G_GAME_EVENTS_MAX_PRODUCTION_PROBLEM_YEARS), constants.g_game_events.m_max_production_problem_years },
        };

        save[CToS(G_Config_Enum::G_GLOBAL)] = {
            { CToS(G_Config_Enum::G_GLOBAL_CONFIG_SECTION_COUNT), constants.g_global.s_config_section_count },
            { CToS(G_Config_Enum::G_GLOBAL_TOTAL_CONFIG_ENTRY_COUNT), constants.g_global.s_total_config_entry_count },
            { CToS(G_Config_Enum::G_GLOBAL_LOAD_CONFIG_ENTRY_COUNT), constants.g_global.s_load_config_entry_count },
            { CToS(G_Config_Enum::G_GLOBAL_COPYRIGHT), constants.g_global.s_copyright },
            { CToS(G_Config_Enum::G_GLOBAL_CURRENT_LANGUAGE_NAME), constants.g_global.m_current_language_name },
            { CToS(G_Config_Enum::G_GLOBAL_MIN_ROUNDS), constants.g_global.m_min_rounds },
            { CToS(G_Config_Enum::G_GLOBAL_MAX_ROUNDS), constants.g_global.m_max_rounds },
            { CToS(G_Config_Enum::G_GLOBAL_CURRENT_TARGET_ROUND), constants.g_global.m_current_target_round },
            { CToS(G_Config_Enum::G_GLOBAL_CURRENT_ROUND), constants.g_global.m_current_round },
        };

        save[CToS(G_Config_Enum::G_PLANET)] = {
            { CToS(G_Config_Enum::G_PLANET_TOTAL_CONFIG_ENTRY_COUNT), constants.g_planet.s_total_config_entry_count },
            { CToS(G_Config_Enum::G_PLANET_LOAD_CONFIG_ENTRY_COUNT), constants.g_planet.s_load_config_entry_count },
            { CToS(G_Config_Enum::G_PLANET_MAX_SHIPS_FACTOR), constants.g_planet.m_max_ships_factor },
            { CToS(G_Config_Enum::G_PLANET_STARTING_HUMAN_SHIPS_MULTIPLIER), constants.g_planet.m_starting_human_ships_multiplier },
            { CToS(G_Config_Enum::G_PLANET_STARTING_GLOBAL_SHIPS_MULTIPLIER), constants.g_planet.m_starting_global_ships_multiplier },
            { CToS(G_Config_Enum::G_PLANET_HOME_WORLD_PRODUCTION), constants.g_planet.m_home_world_production },
            { CToS(G_Config_Enum::G_PLANET_MIN_PRODUCTION), constants.g_planet.m_min_production },
            { CToS(G_Config_Enum::G_PLANET_MAX_PRODUCTION), constants.g_planet.m_max_production },
            { CToS(G_Config_Enum::G_PLANET_HOME_WORLD_SPACING), constants.g_planet.m_home_world_spacing },
            { CToS(G_Config_Enum::G_PLANET_GLOBAL_SPACING), constants.g_planet.m_global_spacing },
        };

        save[CToS(G_Config_Enum::G_PLAYER)] = {
            { CToS(G_Config_Enum::G_PLAYER_TOTAL_CONFIG_ENTRY_COUNT), constants.g_player.s_total_config_entry_count },
            { CToS(G_Config_Enum::G_PLAYER_LOAD_CONFIG_ENTRY_COUNT), constants.g_player.s_load_config_entry_count },
            { CToS(G_Config_Enum::G_PLAYER_MIN_COUNT), constants.g_player.m_min_count },
            { CToS(G_Config_Enum::G_PLAYER_MAX_COUNT), constants.g_player.m_max_count },
            { CToS(G_Config_Enum::G_PLAYER_IS_SHUFFLE), constants.g_player.m_is_shuffle },
        };

        hlp::SaveFile(Files::s_savesDir, Files::s_configFile, save.dump(4));
        hlp::Print(hlp::PrintType::INFO, "config saved");
    }

} // namespace cst
